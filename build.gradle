import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

plugins {
    id 'java'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
    id 'com.bmuschko.docker-remote-api' version "$dockerVersion"
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}


java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


allprojects {
    group = 'az.ingress'

    def hash = 'git rev-parse --short HEAD'.execute().text.trim()
    version = "$projectVersion.$hash"

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.bmuschko.docker-remote-api'
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def javaProjects = [project(':library1'), project(':library2')]

javaProjects.each { project ->
    task("dockerFile${project.name.capitalize()}", type: Dockerfile, dependsOn: ":${project.path}:assemble") {
        destFile.set(project.file('Dockerfile'))
        from "alpine:$alpineVersion"
        runCommand 'apk add --no-cache openjdk17'
        runCommand 'apk add --no-cache tzdata'
        copyFile "build/libs/${project.name}-${project.version}.jar", '/app/'
        workingDir '/app/'
        entryPoint 'java'
        defaultCommand '-jar', "/app/${project.name}-${project.version}.jar"
    }

    task("dockerBuild${project.name.capitalize()}", type: DockerBuildImage, dependsOn: "dockerFile${project.name.capitalize()}") {
        inputDir.set(file("${project.projectDir}"))
        doLast {
            println("Creating image: $dockerRepoUrl/ing-site-${project.name}:${project.version}")
        }
        images.add("$dockerRepoUrl/${project.name}:${project.version}")
    }

    task("dockerPush${project.name.capitalize()}", type: DockerPushImage, dependsOn: "dockerBuild${project.name.capitalize()}") {
        images.add("$dockerRepoUrl/${project.name}:${project.version}")

        registryCredentials.setUsername("$dockerHubUsername")
        registryCredentials.setPassword("$dockerHubPassword")
        registryCredentials.setEmail("$dockerHubEmail")
    }
}

task generateDockerFiles {
    dependsOn(tasks.matching { Task task -> task.name.startsWith('dockerFile') })
}

task buildDockerImages {
    dependsOn(tasks.matching { Task task -> task.name.startsWith('dockerBuild') })
}

task pushDockerImages {
    dependsOn(tasks.matching { Task task -> task.name.startsWith('dockerPush') })
}


tasks.named('test') {
    useJUnitPlatform()
}
